SyntaxCompleterPlugin
=====================

The SyntaxCompleterPlugin is a gedit plugin that will suggest words
to complete the word at the cursor. The word may come from the
vocabulary of the document, or from the syntax of the document's
language.

The plugin, like the gedit.Plugin object it descends from does not
require any parameters during initialization.

    >>> from syntaxcompleterplugin import SyntaxCompleterPlugin
    >>> plugin = SyntaxCompleterPlugin()
    >>> plugin
    <SyntaxCompleterPlugin object (GObject) ...>


Gedit plugin API part 1
-----------------------

APIs for starting and using the plugin.


activate()
~~~~~~~~~~

Whenever a new gedit window is created the activate() method of the
plugin is called with one argument, the gedit.Window. The plugin
creates the SyntaxController, and binds it and the window to itself.
It also adds the controller to the view.

    >>> from testing.gedithelpers import get_window
    >>> import gtk
    >>> import gedit
    >>> window, view, document = get_window('plugins/gdp/data/snark12.txt')
    >>> plugin.activate(window)
    >>> plugin.window is window
    True
    >>> plugin.controller is window.get_active_view()._syntax_controller
    True
    >>> plugin.controller
    <gdp.syntaxcompleter.SyntaxController object at ...>


update_ui()
~~~~~~~~~~~

The update_ui function is called when the plugin is requested to update
the application's UI. for instance, when a tab becomes active, such as
when a new tab is created, the plugin will bind the controller to the
tab's view.

    >>> old_controller = plugin.controller
    >>> window.get_child().get_current_page()
    0
    
    >>> window.create_tab_from_uri('/home/chovey/Desktop/wrap-test.html',
    ...     None, 0, False, True)
    >>> window.get_child().get_current_page()
    1
    >>> new_view = window.get_active_view()

    >>> new_view._syntax_controller
    <gdp.syntaxcompleter.SyntaxController object at ...>
    >>> new_view is view
    False
    >>> new_view._syntax_controller is old_controller
    False
    >>> new_view._syntax_controller is plugin.controller
    True
    >>> gtk.main()


GSignals
--------

The SyntaxCompleter plugin receives the gedit Window's tab-added
signal.


on_tab_added
~~~~~~~~~~~~

When a new tab is created, the plugin will bind the controller to the
tab's view.

    >>> signal_tester = SignalTester()
    >>> signal_tester.attachReceptionHarness(plugin)
    >>> signal_tester.testeeConnect(
    ...     plugin, window, 'window', 'tab-added', plugin.on_tab_added)
    >>> tab = gedit.Tab()
    >>> dummy = Dummy()
    >>> dummy['Tab.get_view'] = gedit.View()

    >>> hasattr(tab.get_view(), '_syntax_controller')
    False
    >>> signal_tester.emitter('tab-added', window, tab)
    >>> hasattr(tab.get_view(), '_syntax_controller')
    True

    >>> del dummy['Tab.get_view']
    >>> plugin.testeeDisconnect(plugin, window, 'window', 'tab-added')
    >>> signal_tester.detachReceptionHarness(plugin)


Gedit plugin API part 2
-----------------------

APIs for removing the plugin.


deactivate()
~~~~~~~~~~~~

When a window is destroyed the deactivate function is called by the
app, passing the window to the function. The plugin unbinds the
controller from the views, then removes its own bindings to the window
and the controller.

    >>> plugin.deactivate(window)
    >>> literal(plugin.window)
    None
    >>> literal(plugin.controller)
    None
    >>> hasattr(view, '_syntax_controller')
    False

