SyntaxModel for SyntaxCompleter
===============================

The SyntaxModel manages a list of words that may complete the
prefix provided. It is used by SyntaxCompleter.


SyntaxModel
-----------

SyntaxModel is responsible for selecting a SyntaxModel that provides
the words. SyntaxModel controls the filtering and retrieval of the
words.

The complete model requires a tuple of sources that identify and
provide the data. The document is a gedit.Document. The words in
the document may be used to create the vocabulary. A prefix may be
provided to filter the words in the vocabulary.

    >>> from gdp.syntaxcompleter import SyntaxModel
    >>> SyntaxModel()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

    >>> import gedit
    >>> document = gedit.Document()
    >>> document.load('plugins/gdp/data/snark12.txt', None, 0, False)
    >>> model = SyntaxModel(document)
    >>> model
    <SyntaxModel object (PyGtkGenericTreeModel) at ...>


filterWords()
~~~~~~~~~~~~~

The model can filter the vocabulary to match the prefix provided.

    >>> len(model.words)
    1987
    >>> model.words == model.visible_words
    True
    >>> model.visible_words
    ['000', '000x100', '03', '08', '1', '10', '1992', '2', ...]

    >>> model.filterWords('B')
    >>> model.words == model.visible_words
    False
    >>> len(model.visible_words)
    109
    >>> model.visible_words
    ['B', 'backwards', 'bade', 'bags', 'bake', 'BAKER', ...]

    >>> model.filterWords('Be')
    >>> model.words == model.visible_words
    False
    >>> len(model.visible_words)
    38
    >>> model.visible_words
    ['be', 'BE', 'Be', 'beach', 'beamish', 'bear', 'bearer', ...]

When a prefix is provided to the model when it is created, the prefix
restricts the vocabulary to only those words that match the prefix.
Matching is case-insensative.

    >>> model = SyntaxModel(document, prefix='B')
    >>> model.words == model.visible_words
    True
    >>> len(model.words)
    108
    >>> model.visible_words == model.words
    True
    >>> model.visible_words
    ['backwards', 'bade', 'bags', 'bake', 'BAKER', 'Baker', ...]


Words are always displayed in the UI escaped to avoid conflicts
with Pango.

    >>> model.displayWord('<b>')
    '&lt;b&gt;'


Compatability with snippets.CompleteModel
-----------------------------------------

As SyntaxCompleter inherits a lot of functionality from gedit.snippets.
Several methods are implemented using the terminology of data. The
term 'word' is used where snippets.CompleteModel used node or snippet.
SyntaxModel maintains propertied that are compatible with
snippets.CompleteModel.

The model's words and visible_words can be retrieved using the nodes
and visible_nodes properties.

    >>> nodes = model.nodes
    >>> len(nodes)
    108
    >>> nodes == model.words
    True
    >>> nodes
    ['backwards', 'bade', 'bags', 'bake', 'BAKER', 'Baker', ...]

    >>> nodes = model.visible_nodes
    >>> len(nodes)
    108
    >>> nodes == model.visible_words
    True
    >>> nodes
    ['backwards', 'bade', 'bags', 'bake', 'BAKER', 'Baker', ...]

The property display_snippet is equivalent to display_word, and that
attribute is display_word_default.

    >>> method1 = model.display_snippet
    >>> method2 = model.displayWord
    >>> method1 == method2
    True
    >>> model.display_snippet('<b>')
    '&lt;b&gt;'


gtk.GenericTreeModel Behaviour
------------------------------

SyntaxModel, as a descendant or snippets.CompleteModel, implements a
gtk.ListStore via the gtk.GenericTreeModel.

    >>> model.get_flags()
    <flags GTK_TREE_MODEL_LIST_ONLY of type GtkTreeModelFlags>

    >>> model.column_types
    (<type 'str'>, <type 'str'>)

    >>> (model.get_column_type(0), model.get_column_type(1))
    (<GType gchararray (64)>, <GType gchararray (64)>)

    >>> model.get_n_columns()
    2

The data in the tree is accessible through the standard TreeModel
methods.

    >>> model.iter_n_children(None)
    108
    >>> tree_iter = model.get_iter_first()
    >>> model.iter_has_child(tree_iter)
    False
    >>> model.iter_parent(tree_iter) is None
    True

    >>> model.get_value(tree_iter, 0)
    'backwards'
    >>> model.get_value(model.iter_next(tree_iter), 0)
    'bade'

The model is really a list, so iter_children(None), get_iter_first(),
get_iter_root() are equivalent.

    >>> path1 = model.get_path(model.iter_children(None))
    >>> path2 = model.get_path(model.get_iter_first())
    >>> path3 = model.get_path(model.get_iter_root())
    >>> [path1, path2, path3]
    [(0,), (0,), (0,)]

The word 'Baker' is the at index 5 in the preceding examples
of the model's words.

    >>> model.words[5]
    'Baker'
    >>> tree_iter = model.get_iter(5)
    >>> model.get_path(tree_iter)
    (5,)
    >>> model.get_value(tree_iter, 0)
    'Baker'
    >>> model.get_value(model.iter_nth_child(None, 5), 0)
    'Baker'

The get_value() method uses display_word return either the
raw word or the displayable word.

    >>> model.words.append('<b>')
    >>> model.filterWords('')
    >>> len(model.visible_words)
    109
    >>> model.get_value(model.iter_nth_child(None, 108), 0)
    '&lt;b&gt;'
    >>> model.get_value(model.iter_nth_child(None, 108), 1)
    '<b>'
