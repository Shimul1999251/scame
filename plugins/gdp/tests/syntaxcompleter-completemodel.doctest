SyntaxModel for SyntaxCompleter
===============================

The SyntaxModel manages a list of words thagt may complete the
prefix provided. It is used by SyntaxCompleter.


SyntaxModel
-----------

SyntaxModel is responsible for selecting a SyntaxModel that provides
the words. SyntaxModel controls the filtering and retrieval of the
words. 

The complete model requires a tuple of sources that identify and
provide the data. The sources tuple contains the mime_type, file_path,
and text_buffer. The mime_type is used to select to the SyntaxModel.
The other items in sources may be used to create the vocabulary. A
prefix may be provided to filter the words in the vocabulary.

    >>> from gdp.syntaxcompleter import SyntaxModel
    >>> SyntaxModel()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

    >>> from gdp.tests.helpers import get_gtk_textbuffer
    >>> text_buffer = get_gtk_textbuffer('plugins/gdp/data/snark12.txt')
    >>> sources = ('text/plain', '', text_buffer)
    >>> model = SyntaxModel(sources)
    >>> model
    <SyntaxModel object (PyGtkGenericTreeModel) at ...>

The model can filter the vocabulary to match the prefix provided.

    >>> len(model.words)
    1987
    >>> model.words == model.visible_words
    True
    >>> model.visible_words
    ['000', '000x100', '03', '08', '1', '10', '1992', '2', ...]

    >>> model.filter_word_default('B')
    >>> model.words == model.visible_words
    False
    >>> len(model.visible_words)
    109
    >>> model.visible_words
    ['B', 'backwards', 'bade', 'bags', 'bake', 'BAKER', ...]

    >>> model.filter_word_default('Be')
    >>> model.words == model.visible_words
    False
    >>> len(model.visible_words)
    38
    >>> model.visible_words
    ['be', 'BE', 'Be', 'beach', 'beamish', 'bear', 'bearer', ...]

When a prefix is provided to the model when it is created, the prefix
restricts th vocabulary to only those words that match the prefix.
Matching is case-insensative.

    >>> sources = ('text/plain', '', text_buffer)
    >>> prefix = 'B'
    >>> model = SyntaxModel(sources, prefix=prefix)
    >>> model.words == model.visible_words
    True
    >>> len(model.words)
    108
    >>> model.visible_words
    ['backwards', 'bade', 'bags', 'bake', 'BAKER', 'Baker', ...]
