DynamicProvider for SyntaxCompleter
===================================

The DynamicProvider manages a list of proposals that may complete the
prefix provided. It is used by SyntaxCompleter.


DynamicProvider
---------------

DynamicProvider is responsible for selecting a SyntaxGenerator that provides
the words. DynamicProvider controls the filtering and retrieval of the
words.

The complete model requires a tuple of sources that identify and
provide the data. The document is a gedit.Document. The words in
the document may be used to create the vocabulary. A prefix may be
provided to filter the words in the vocabulary.

    >>> from gdp.syntaxcompleter import DynamicProvider
    >>> import gedit

    >>> DynamicProvider()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes exactly 5 arguments (1 given)

    >>> def handler(proposal, piter):
    ...     return proposal.get_text()

    >>> document = gedit.Document()
    >>> document.load('plugins/gdp/data/snark12.txt', None, 0, False)
    >>> language_id = None
    >>> provider = DynamicProvider("tester", language_id, handler, document)
    >>> provider
    <DynamicProvider object at ... (gdp+syntaxcompleter+DynamicProvider ...)>


get_proposals()
~~~~~~~~~~~~~~~

The model calls get_proposals() to generate the unqiue list of words
that match the prefix. The list must be unique because the
CompleteModel.on_iter_next() can enter an infinite loop.

    >>> proposals = provider.get_proposals(prefix='')
    >>> len(proposals)
    1987
    >>> sorted([proposal._word for proposal in proposals])
    ['000', '000x100', '03', '08', '1', '10', '1992', '2', ...]


get_generator()
~~~~~~~~~~~~~~~

The create_list() method uses the get_generator() method to get the generator
for the language of the document.

The TextGenerator is used for text documents and unsupported languages, but
the get_generator() method does not return it because create_list() will
instantiate it when the results are not authoritative.

    >>> print provider.get_generator(document, '')
    None

The PythonSyntaxGenerator is returned for python files.

    >>> python_document = gedit.Document()
    >>> python_document.load('plugins/gdp/data/snark.py', None, 0, False)
    >>> language_id = python_document.get_language().get_id()
    >>> provider = DynamicProvider(
    ...     "tester", language_id, handler, python_document)
    >>> provider.get_generator(python_document, '')
    <gdp.syntaxcompleter.PythonSyntaxGenerator ...>

The MarkupGenerator is returned for XML-based markup documents.

    >>> markup_document = gedit.Document()
    >>> markup_document.load('plugins/gdp/data/snark.html', None, 0, False)
    >>> language_id = markup_document.get_language().get_id()
    >>> provider = DynamicProvider(
    ...     "tester", language_id, handler, markup_document)
    >>> provider.get_generator(markup_document, '')
    <gdp.syntaxcompleter.MarkupGenerator ...>
