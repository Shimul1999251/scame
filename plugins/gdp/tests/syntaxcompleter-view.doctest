SyntaxView for SyntaxCompleter
==============================
The Syntax view is a widget for showing, filtering, and selecting
a word. It is a subclass of snippets.SnippetComplete and replaces
some if its data and methods with its own.


SyntaxView
----------

The SyntaxView requires a sources tuple of file_path and
sourcebuffer to build itself.

Note that the super class uses the gedit namespace that is not
available outside the hosted environment. The mock-based gedit
module is used in these tests. Compatible objects are added to the
Mock data dictionary for the mock functions and methods to
return when they are called in the next test.

    >>> from gdp.syntaxcompleter import SyntaxView
    >>> SyntaxView()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

    >>> from testing.helpers import get_sourcebuffer, get_mock
    >>> source_buffer = get_sourcebuffer('plugins/gdp/data/snark12.txt')
    >>> sources = ('', source_buffer)
    >>> # SnippetComplete.__init__ calls gedit behaviours that must
    >>> # return sensible data for this test.
    >>> import gtk
    >>> import gedit
    >>> mock = get_mock()
    >>> mock.data['app_get_default'] = gedit.App()
    >>> mock.data['App_get_active_window'] = gtk.Window(
    ...     type=gtk.WINDOW_TOPLEVEL)
    >>> view = SyntaxView(sources)
    >>> view
    <SyntaxView object (GtkWindow) at ...>

SyntaxView overrides the snippets.SnippetComplete's initialization to
replace the model with SyntaxModel.

    >>> view.model
    <SyntaxModel object (PyGtkGenericTreeModel) at ...>
    >>> len(view.model.words)
    1987
    >>> view.model.visible_words
    ['000', '000x100', '03', '08', '1', '10', '1992', '2', ...]
    >>> view.model.filter_words('ba')
    >>> view.model.visible_words
    ['backwards', 'bade', 'bags', 'bake', 'BAKER', 'Baker', ...]

A prefix may be provided when initializing the SyntaxView.
Note that the visible_words lists are sorted somewhat
differently--this appears to relate to the starting set of words
in the vocabulary.

    >>> view = SyntaxView(sources, 'ba')
    >>> view.model.visible_words
    ['backwards', 'bade', 'bags', 'bake', 'Baker', 'BAKER', ...]

SyntaxView provides a gsignal, 'syntax-activated', for client code to
register a callback with. The gsignal is activated when the user has
selected a word, thus activating the row in the TreeView. The method
syntax_activated is also responsible to for destroying the window, and
thus disconnects the signal.

    >>> from testing.helpers import literal, proof, SignalTester
    >>> signal_tester = SignalTester(['view', 'word'])
    >>> literal(signal_tester.view)
    None
    >>> literal(signal_tester.word)
    None

    >>> handler_id = view.connect('syntax-activated', signal_tester.receiver)
    >>> view.handler_is_connected(handler_id)
    True
    >>> view.model.visible_words[4]
    'Baker'
    >>> view.syntax_activated(view.model.visible_words[4])
    >>> view is signal_tester.view
    True
    >>> signal_tester.word
    'Baker'
   
    >>> view.handler_is_connected(handler_id)
    False

SyntaxView is compatible with its parent class SnippetComplete. Calling
snippet_activated will emit the 'syntax-activated' signal.

    >>> signal_tester.view = None
    >>> signal_tester.word = None
    >>> handler_id = view.connect('syntax-activated', signal_tester.receiver)
    >>> view.snippet_activated(view.model.visible_words[3])
    >>> proof(view is signal_tester.view)
    True
    >>> signal_tester.word
    'bake'

