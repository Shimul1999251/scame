SyntaxGenerators
================

The a SyntaxGenerators class represents a word source and syntax rules.
It can build a list of matching words when provided a word prefix.
Some syntax completers require a gedit.Document as their word source.


SyntaxGenerator
---------------

The base SyntaxGenerator class defines the core methods that all
subclasses may choose override. It also provides several helper methods
and properties. The __init__ method requires a gedit.Document.

    >>> from gdp.syntaxcompleter import BaseSyntaxGenerator
    >>> generator = BaseSyntaxGenerator()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

    >>> import gedit
    >>> document = gedit.Document()
    >>> hunting_the_snark = 'plugins/gdp/data/snark12.txt'
    >>> document.load(hunting_the_snark, None, 0, False)
    >>> generator = BaseSyntaxGenerator(document)
    >>> generator
    <gdp.syntaxcompleter.BaseSyntaxGenerator object at ...>

    >>> generator.file_path
    'plugins/gdp/data/snark12.txt'
    >>> generator.text == document.get_text(document.get_start_iter(),
    ...     document.get_end_iter())
    True

    >>> generator.getWords('Ba')
    Traceback (most recent call last):
    ...
    NotImplementedError


TextGenerator
-------------

The TextGenerator class represents plain text sources. The words of the
source are the words it represents, no alteration or interpretation is
applied. Words are identified by common word boundaries like
punctuation and line ends.

    >>> from gdp.syntaxcompleter import TextGenerator
    >>> text_generator = TextGenerator(document)
    >>> text_generator
    <gdp.syntaxcompleter.TextGenerator object at ...>

    >>> text_generator.file_path
    'plugins/gdp/data/snark12.txt'

    >>> text_generator.text
    'This is the Project Gutenberg Etext of The Hunting of the Snark...'

    >>> text_generator = TextGenerator(document)

The getWords method returns all words in the generator, unordered.

    >>> words = text_generator.getWords()
    >>> len(words)
    1987
    >>> words
    ['aided', 'limited', 'writings', 'yellow', 'protest', ...]

When the generator is created with a prefix, the generator will only
contain words that start with the prefix. Matching is
case-insensitive.

    >>> text_generator = TextGenerator(document, prefix='Ba')
    >>> words = text_generator.getWords()
    >>> len(words)
    16
    >>> words
    ['bags', 'backwards', 'based', 'bands', 'Bandersnatch', ...]

    >>> text_generator = TextGenerator(document, prefix='Snar')
    >>> words = text_generator.getWords()
    >>> len(words)
    5
    >>> words
    ['SNARK', 'snark12', 'Snark', 'Snarks', 'snarked']

    >>> text_generator = TextGenerator(document, prefix='snar')
    >>> lowercase_words = text_generator.getWords()
    >>> lowercase_words == words
    True
    >>> lowercase_words
    ['SNARK', 'snark12', 'Snark', 'Snarks', 'snarked']

    >>> text_generator = TextGenerator(document, prefix='SNAR')
    >>> uppercase_words = text_generator.getWords()
    >>> lowercase_words == uppercase_words == words
    True
    >>> lowercase_words
    ['SNARK', 'snark12', 'Snark', 'Snarks', 'snarked']

Hypenated words are

    >>> text_generator = TextGenerator(document, prefix='What-')
    >>> words = text_generator.getWords()
    >>> text_generator.getWords()
    ['What-you-may-call-um', 'What-was-his-name']
