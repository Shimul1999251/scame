#!/bin/bash

# [Gedit Tool]
# Comment=3-lint
# Input=nothing
# Shortcut=F3
# Applicability=all
# Output=output-panel

PWD=`pwd`
BRANCH=`bzr root`
echo Branch is at $BRANCH
cd $BRANCH

export PYTHONPATH=lib:plugins:src:$PYTHONPATH:/usr/lib/gedit-2/plugins

VERBOSITY=0
rules="Using normal rules."
rcfile="--rcfile=$HOME/.pylintrc"

files=$GEDIT_CURRENT_DOCUMENT_PATH

echo "= Navel lint ="
echo ""
echo "Checking for conflicts. Running xmllint, formatdoctest,py, pyflakes, and pylint."
echo "$rules"

if [ -z "$files" ]; then
    echo "No changed files detected."
    exit 0
fi


group_lines_by_file() {
    # Format file:line:message output as lines grouped by file.
    file_name=""
    echo "$1" | sed 's,\(^[^ :<>=+]*:\),~~\1\n,' | while read line; do
        current=`echo $line | sed '/^~~/!d; s/^~~\(.*\):$/\1/;'`
        if [ -z "$current" ]; then
            echo "    $line"
        elif [ "$file_name" != "$current" ]; then
            file_name="$current"
            echo ""
            echo "$file_name"
        fi
    done
}


conflicts=""
for file in $files; do
    # NB. Odd syntax on following line to stop lint.sh detecting conflict
    # markers in itself.    
    if grep -q -e '<<<''<<<<' -e '>>>''>>>>' $file; then
        conflicts="$conflicts $file"
    fi
done

if [ "$conflicts" ]; then
    echo ""
    echo ""
    echo "== Conflicts =="
    echo ""
    for conflict in $conflicts; do
        echo "$conflict"
    done
fi


xmlfiles=`echo "$files" | grep -E '(xml|xsl|zcml|pt|html|kid)$'`
xmllint_notices=""
if [ ! -z "$xmlfiles" ]; then
    xmllint_notices=`xmllint --noout $xmlfiles 2>&1 | sed -e '/Entity/,+2d'`
fi
if [ ! -z "$xmllint_notices" ]; then
    echo ""
    echo ""
    echo "== XmlLint notices =="
    group_lines_by_file "$xmllint_notices"
fi

doctestfiles=`echo "$files" | grep -E '/(doc|pagetests|f?tests)/.*(txt|doctest)$'`
if [ ! -z "$doctestfiles" ]; then
    doctest_notices=`${HOME}/.gnome2/gedit/tool/formatdoctest.py $doctestfiles 2>&1`
fi
if [ ! -z "$doctest_notices" ]; then
    echo ""
    echo ""
    echo "== Doctest notices =="
    echo ""
    echo "$doctest_notices"
fi


jsfiles=`echo "$files" | grep -E 'js$'`
if [ ! -z "$jsfiles" ]; then
    js_notices=''
    #`$HOME/bin/jslint.py $jsfiles 2>&1`
fi
if [ ! -z "$js_notices" -a "$js_notices" != "No lint in launchpad.js" ]; then
    echo ""
    echo ""
    echo "== Javascript notices =="
    echo ""
    echo "$js_notices"
fi


pyfiles=`echo "$files" | grep -E '(py|tac)$'`
if [ -z "$pyfiles" ]; then
    exit 0
fi


sed_deletes="/detect undefined names/d; /'_pythonpath' .* unused/d;"
pyflakes_notices=`pyflakes $pyfiles 2>&1 | sed "$sed_deletes"`
if [ ! -z "$pyflakes_notices" ]; then
    echo ""
    echo ""
    echo "== Pyflakes notices =="
    group_lines_by_file "$pyflakes_notices"
fi


export PYTHONPATH="/usr/share/pycentral/pylint/site-packages:$PYTHONPATH"
pylint="python2.5 -Wi::DeprecationWarning `which pylint`"
sed_deletes="/^*/d; /Unused import \(action\|_python\)/d; "
sed_deletes="$sed_deletes /_action.* Undefined variable/d; "
sed_deletes="$sed_deletes /_getByName: Instance/d; "
sed_deletes="$sed_deletes /Redefining built-in .id/d;"
sed_deletes="$sed_deletes /Redefining built-in 'filter'/d;"
sed_deletes="$sed_deletes s,^/.*lib/canonical/,lib/canonical,;"

# Note that you can disable specific tests by placing pylint
# instruction in a comment:
# # pylint: disable-msg=W0401,W0612,W0403
pylint_notices=`$pylint $rcfile $pyfiles | sed "$sed_deletes"`

if [ ! -z "$pylint_notices" ]; then
    echo ""
    echo ""
    echo "== Pylint notices =="
    group_lines_by_file "$pylint_notices"
fi


















