%%
headers
# Copyright (C) 2007-2009 - Curtis Hovey <sinzui.is at verizon.net>
# This software is licensed under the GNU General Public License version 2
# (see the file COPYING).

__metaclass__ = type
%%
modulename __init__
%%
import __builtin__
from gettext import gettext

import gobject
from gobject import *
import gtk
import gtksourceview2
%%
define app_get_default
def app_get_default():
    """A fake implementation of app_get_default.

    Return a Gedit.App.
    """
    return App()
%%
define Document.__init__
    def __init__(self):
        """A fake initialization of gedit.Document."""
        super(Document, self).__init__()
        self.uri = None
        self.encoding = None
        self.language = None
%%
define Document.get_uri
    def get_uri(self):
        """A fake implementation of get_uri."""
        key = '%s.get_uri' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return self.uri
%%
define Document.get_uri_for_display
    def get_uri_for_display(self):
        """A fake implementation of get_uri_for_display."""
        key = '%s.get_uri_for_display' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        if self.uri.startswith('file:'):
            from urllib import url2pathname
            return url2pathname(self.uri[7:])
        else:
            return self.uri
%%
define Document.get_mime_type
    def get_mime_type(self):
        """A fake implementation of get_mime_type."""
        key = '%s.get_mime_type' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        elif self.language:
            mime_types = self.language.get_mime_types()
            if mime_types:
                return mime_types[0]
        else:
            # There is no information about the mime-type.
            pass
        return 'text/plain'
%%
define Document.load
    def load(self, uri, encoding, line_pos, create):
        """A fake implementation of load.

        The encoding, line_pos, and create args are ignored.
        The uri must use the file:// protocol.
        """
        key = '%s.load' % self.__class__.__name__
        if key in dummy:
            return
        from mimetypes import MimeTypes
        from urllib import urlopen
        try:
            source_file = urlopen(uri)
            text = ''.join(source_file.readlines())
        except IOError:
            raise ValueError, _(u'%s cannot be read' % uri)
        else:
            source_file.close()
        self.set_text(text)
        self.uri = uri
        self.encoding = encoding
        mt = MimeTypes()
        mime_type, encoding = mt.guess_type(uri)
        lang_id = MIME_TYPES.get(mime_type, None)
        if lang_id:
            language_manager = gtksourceview2.LanguageManager()
            language = language_manager.get_language(lang_id)
        else:
            language = None
        self.set_language(language)
%%
define Document.set_language
    def set_language(self, val):
        """A fake implementation of set_language."""
        key = '%s.set_language' % self.__class__.__name__
        if key in dummy:
            dummy[key] = val
            return
        self.language = val
%%
define Document.get_language
    def get_language(self):
        """A fake implementation of get_language."""
        key = '%s.get_language' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return self.language
%%
define View.__init__
    def __init__(self, document=None):
        """A fake initialization of gedit.View."""
        if not document:
            document = Document()
        super(View, self).__init__(document)
%%
define View.get_window
    def get_window(self, win):
        """Return the real or dummy gdk.window.

        When View.get_window is a key in dummy, a testing value is returned,
        other the real window is returned.
        """
        key = '%s.get_window' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return super(View, self).get_window(win)
%%
define Tab.__init__
    def __init__(self):
        """A fake initialization of gedit.Tab."""
        super(Tab, self).__init__()
%%
define Tab.get_view
    def get_view(self):
        """A fake implementation of get_view."""
        key = '%s.get_view' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        children = self.get_children()
        if children:
            # vbox[scrolledwindow].viewport.view
            return children[0].get_child().get_child()
        return None
%%
define Tab.get_document
    def get_document(self):
        """A fake implementation of get_document."""
        key = '%s.get_document' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        view = self.get_view()
        if view:
            return view.get_buffer()
        return None
%%
define Window.__init__
    def __init__(self):
        """A fake initialization of gedit.Tab."""
        super(Window, self).__init__()
        self.add(gtk.Notebook())
        self.connect("destroy", gtk.main_quit)
        self.resize(300, 250)
%%
define Window.create_tab
    def create_tab(self, jump_to):
        """A fake implementation of create_tab."""
        key = '%s.create_tab' % self.__class__.__name__
        if key in dummy:
            return
        self.create_tab_from_uri(None, None, 0, True, jump_to)
%%
define Window.create_tab_from_uri
    def create_tab_from_uri(self, uri, encoding, line_pos, create, jump_to):
        """A fake implementation of create_tab_from_uri."""
        key = '%s.create_tab_from_uri' % self.__class__.__name__
        if key in dummy:
            return
        document = Document()
        tab_label = gtk.Label('Untitled')
        if uri:
            from os.path import basename
            document.load(uri, encoding, line_pos, create)
            tab_label = gtk.Label(basename(document.get_uri_for_display()))
        view = View(document)
        scrolled_win = gtk.ScrolledWindow()
        scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        scrolled_win.add_with_viewport(view)
        tab = Tab()
        tab.pack_start(scrolled_win)
        n = self.get_child().append_page(tab, tab_label)
        tab.show_all()
        if n == 0 or jump_to:
            self.get_child().set_current_page(n)
        self.emit('tab-added', tab)
%%
define Window.set_active_tab
    def set_active_tab(self, tab):
        """A fake implementation of set_active_tab."""
        key = '%s.set_active_tab' % self.__class__.__name__
        if key in dummy:
            dummy[key] = tab
            return
        n = self.get_child().page_num(tab)
        self.get_child().set_current_page(n)
%%
define Window.get_active_tab
    def get_active_tab(self):
        """A fake implementation of get_active_tab."""
        key = '%s.get_active_tab' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        n = self.get_child().get_current_page()
        return self.get_child().get_nth_page(n)
%%
define Window.get_active_view
    def get_active_view(self):
        """A fake implementation of get_active_view."""
        key = '%s.get_active_view' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        tab = self.get_active_tab()
        return tab.get_view()
%%
define Window.get_active_document
    def get_active_document(self):
        """A fake implementation of get_active_document."""
        key = '%s.get_active_document' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        tab = self.get_active_tab()
        return tab.get_document()
%%
define Window.get_views
    def get_views(self):
        """A fake implementation of get_views."""
        key = '%s.get_views' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return [tab.get_view() for tab in self.tabs_]
%%
define Window.get_documents
    def get_documents(self):
        """A fake implementation of get_documents."""
        key = '%s.get_views' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return [tab.get_document() for tab in self.tabs_]
%%
define Window.get_bottom_panel
    def get_bottom_panel(self):
        """A fake bottom panel."""
        class FakePanel:
            def __init__(self):
               self.widget = None
               self.label = None
               self.icon = None

            def add_item(self, widget, label, icon):
               self.widget = widget
               self.label = label
               self.icon = icon
        return FakePanel()
%%
define Window.get_side_panel
    def get_side_panel(self):
        """A fake bottom panel."""
        class FakePanel:
            def __init__(self):
               self.widget = None
               self.label = None
               self.icon = None

            def add_item(self, widget, label, icon):
               self.widget = widget
               self.label = label
               self.icon = icon
        return FakePanel()
%%
define Window.get_group
    def get_group(self):
        """A fake initialization of gedit.Window.get_group."""
        key = '%s.get_group' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return gtk.WindowGroup()
%%
define Window.get_ui_manager
    def get_ui_manager(self):
        """A fake initialization of gedit.Window.get_ui_manager."""
        key = '%s.get_ui_manager' % self.__class__.__name__
        if key not in dummy:
            dummy[key] = gtk.UIManager()
        return dummy[key]
%%
define Window.tabs_
    @property
    def tabs_(self):
        """A testing property to access all tabs (do not use)."""
        n_pages = self.get_child().get_n_pages()
        tabs = []
        for n in range(0, n_pages):
            tabs.append(self.get_child().get_nth_page(n))
        return tabs
%%
define App.__new__
    def __new__(cls, *args, **kwargs):
        """Create a Singleton class."""
        if '_inst' not in vars(cls):
            cls._inst = super(App, cls).__new__(cls, *args, **kwargs)
        return cls._inst
%%
define App.__init__
    def __init__(self):
        """A fake initialization of gedit.App."""
        super(App, self).__init__()
        self.windows = []
        self.active_window = None
        self.create_window()
%%
define App.create_window
    def create_window(self, screen=None):
        """A fake implementation of create_window."""
        key = '%s.create_window' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        window = Window()
        window.create_tab(True)
        self.windows.append(window)
        self.active_window = window
        return window
%%
define App.get_windows
    def get_windows(self):
        """A fake implementation of get_windows."""
        key = '%s.get_windows' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        return self.windows
%%
define App.get_active_window
    def get_active_window(self):
        """A fake implementation fo get_active_window."""
        key = '%s.get_active_window' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        for window in self.windows:
            if window.is_active():
                return window
        # No window is active, meaning that either there are no Gedit windows
        # or that no gedit windows are in the active window group.
        return self.active_window
%%
define App.get_views
    def get_views(self):
        """A fake implementation fo get_views."""
        key = '%s.get_views' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        views = []
        for window in self.windows:
            views.extend(window.get_views())
        return views
%%
define App.get_documents
    def get_documents(self):
        """A fake implementation fo get_views."""
        key = '%s.get_documents' % self.__class__.__name__
        if key in dummy:
            return dummy[key]
        documents = []
        for window in self.windows:
            documents.extend(window.get_documents())
        return documents
%%
body
# The Gedit python environment has gettext builtin
__builtin__.__dict__['_'] = gettext


def dummy_mime_types():
    """Return a dictionary mime-types and gtksourceview2 Language ids."""
    mime_types = {}
    language_manager = gtksourceview2.LanguageManager()
    for lang_id in language_manager.get_language_ids():
        lang = language_manager.get_language(lang_id)
        for mime_type in lang.get_mime_types():
            mime_types[mime_type] = lang_id
    return mime_types


MIME_TYPES = dummy_mime_types()


gobject.signal_new(
    'tab-added', Window, gobject.SIGNAL_RUN_LAST,
    gobject.TYPE_NONE, (gobject.TYPE_PYOBJECT,))
