Gedit Helpers
=============

This is a set of tests to ensure the test infrastructure works well
enough to be trusted.


Fake objects
------------

This set of tests provide general testing of the fake gedit objects
used in testing. The fake object are not intended to be robust. They
exist to mimic basic gedit object behaviours and collaborations.
Dummy value may, and are, used inplace of the basic functions when
needed.


Document
~~~~~~~~

The fake document provides simple document loading and getter/setters
for working with the file's metadata.

    >>> import gedit
    >>> from urllib import pathname2url
    >>> from os.path import abspath
    >>> from gtksourceview import SourceLanguagesManager
    >>> uri = 'file://%s' % pathname2url(
    ...     abspath('plugins/gdp/data/snark12.txt'))
    >>> document = gedit.Document()
    >>> document
    <Document object (GtkSourceBuffer) at ...>
    >>> document.load(uri, None, 0, False)
    >>> document.get_text(document.get_start_iter(),
    ...     document.get_end_iter())
    'This is the Project Gutenberg Etext of The Hunting of the Snark...'
    >>> document.get_mime_type()
    'text/plain'
    >>> literal(document.get_language())
    None
    >>> document.get_uri()
    'file:///.../plugins/gdp/data/snark12.txt'
    >>> document.get_uri_for_display()
    '/.../plugins/gdp/data/snark12.txt'

    >>> lang_manager = SourceLanguagesManager()
    >>> language = lang_manager.get_language_from_mime_type('text/x-python')
    >>> document.set_language(language)
    >>> document.get_language()
    <gtksourceview.SourceLanguage (id="Python") at ...
    >>> document.get_mime_type()
    'text/x-python'


View
~~~~

The view is an extension to gtk.TextView. It may take a Document
as an initialization argument.

    >>> view = gedit.View(document)
    >>> view
    <View object (GtkSourceView) at ...>
    >>> document_1 = view.get_buffer()
    >>> document_1 is document
    True

    >>> view_2 = gedit.View()
    >>> document_2 = view_2.get_buffer()
    >>> document_2
    <Document object (GtkSourceBuffer) at ...>
    >>> document_2 is document_1
    False


Tab
~~~

The gedit Tab is a widget that holds a view. The Tab is always present,
even when the Gedit UI is set to not display tabs. Tabs inherrit from
gtk.VBox.

    >>> tab = gedit.Tab()
    >>> tab
    <Tab object (GtkVBox) at ...>
    >>> tab.pack_start(view)
    >>> view_2 = tab.get_view()
    >>> view_2 is view
    True
    >>> document_2 = tab.get_document()
    >>> document_2 is document
    True


Window
~~~~~~

The gedit Window manages tabs,  and provides direct access to thier
child views and documents. Window decends from gtk.Window. When
ther is only one tab, it is automatically made active.

    >>> window = gedit.Window()
    >>> window
    <Window object (GtkWindow) at ...>
    >>> window.create_tab(False)
    >>> window._tabs
    [<Tab object (GtkVBox) at ...>]
    >>> window.get_active_tab() == window._tabs[0]
    True

Tabs may be created from a uri...passing the same parameters used
by Document.load(). The jump_to flag is honored.

    >>> window.create_tab_from_uri(uri, None, 0, False, False)
    >>> window._tabs
    [<Tab object (GtkVBox) at ...>, <Tab object (GtkVBox) at ...>]
    >>> window.get_active_tab() == window._tabs[0]
    True

The active tab may be set. From the active tab, the active view
and document can be retrieved. All views and all documnets are
also accessible.

    >>> window.set_active_tab(window._tabs[1])
    >>> window.get_active_tab() == window._tabs[1]
    True
    >>> view = window.get_active_view()
    >>> views = window.get_views()
    >>> views
    [<View object (GtkSourceView) at ...>,
     <View object (GtkSourceView) at ...>]
    >>> view == views[1]
    True
    >>> document = window.get_active_document()
    >>> documents = window.get_documents()
    >>> documents
    [<Document object (GtkSourceBuffer) at ...>,
     <Document object (GtkSourceBuffer) at ...>]
    >>> document == documents[1]
    True
    >>> document is view.get_buffer()
    True
    >>> document.get_uri()
    'file:///.../plugins/gdp/data/snark12.txt'


App
~~~

The gedit App is a singleton object that manages all gedit windows.
It can be retrieved using a factory function app_get_default()

    >>> app = gedit.app_get_default()
    >>> app
    <App object (GObject) at ...>
    >>> new_app = gedit.app_get_default()
    >>> new_app is app
    True

    >>> window_1 = app.create_window()
    >>> window_1.create_tab(False)
    >>> window_1
    <Window object (GtkWindow) at ...>

    >>> window_2 = app.create_window()
    >>> window_2.create_tab(False)
    >>> window_2.create_tab_from_uri(uri, None, 0, False, True)
    >>> window_2
    <Window object (GtkWindow) at ...>
    
    >>> app.get_windows()
    [<Window object (GtkWindow) at ...>, <Window object (GtkWindow) at ...>]

    >>> app.get_views()
    [<View object (GtkSourceView) at ...>,
     <View object (GtkSourceView) at ...>,
     <View object (GtkSourceView) at ...>]
     
    >>> app.get_documents()
    [<Document object (GtkSourceBuffer) at ...>,
     <Document object (GtkSourceBuffer) at ...>,
     <Document object (GtkSourceBuffer) at ...>]

The current gedit window must be active top-level window. It is too
awkward to test here.
